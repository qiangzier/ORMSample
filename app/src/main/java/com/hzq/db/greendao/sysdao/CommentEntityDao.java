package com.hzq.db.greendao.sysdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzq.db.greendao.entity.CommentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT_ENTITY".
*/
public class CommentEntityDao extends AbstractDao<CommentEntity, Integer> {

    public static final String TABLENAME = "COMMENT_ENTITY";

    /**
     * Properties of entity CommentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property ProductId = new Property(1, long.class, "productId", false, "PRODUCT_ID");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property PostedAt = new Property(3, java.util.Date.class, "postedAt", false, "POSTED_AT");
    }


    public CommentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CommentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT_ENTITY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 1: productId
                "\"TEXT\" TEXT," + // 2: text
                "\"POSTED_AT\" INTEGER);"); // 3: postedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommentEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getProductId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        java.util.Date postedAt = entity.getPostedAt();
        if (postedAt != null) {
            stmt.bindLong(4, postedAt.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommentEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getProductId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        java.util.Date postedAt = entity.getPostedAt();
        if (postedAt != null) {
            stmt.bindLong(4, postedAt.getTime());
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public CommentEntity readEntity(Cursor cursor, int offset) {
        CommentEntity entity = new CommentEntity( //
            cursor.getInt(offset + 0), // id
            cursor.getLong(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // postedAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommentEntity entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setProductId(cursor.getLong(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPostedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(CommentEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(CommentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommentEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
